version: 2
workflows:
  version: 2
  build_and_test:
    jobs:
      - clean-code
      - test:
          requires:
            - clean-code
      - test-integration:
          requires:
            - clean-code
      - race:
          requires:
            - clean-code
      - compile_cmds:
          requires:
            - clean-code
      - bb_amd64:
          requires:
            - clean-code
      - bb_arm7:
          requires:
            - clean-code
      - bb_arm64:
          requires:
            - clean-code
      - bb_ppc64le:
          requires:
            - clean-code
      - source_amd64:
          requires:
            - clean-code
      - source_amd64_test_archive:
          requires:
            - clean-code
      - extra_files:
          requires:
            - clean-code
      - extra_files_multiple_files:
          requires:
            - clean-code
      - extra_files_comma_syntax:
          requires:
            - clean-code
      - extra_files_multiple_files_mixed_syntax:
          requires:
            - clean-code
      - extra_files_wrong_comma_syntax:
          requires:
            - clean-code
      - check_licenses:
          requires:
            - clean-code
jobs:
  clean-code:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/u-root/u-root
    steps:
      - checkout
      - run:
          name: Install dep
          command: |
            wget https://github.com/golang/dep/releases/download/v0.5.0/dep-linux-amd64
            mv dep-linux-amd64 dep
            chmod +x dep
      - run:
          name: Install ineffassign
          command: go get github.com/gordonklaus/ineffassign
      - run:
          name: Check vendored dependencies
          command: |
            ./dep version
            ./dep status
            ./dep ensure -vendor-only
            git status
            if [[ -n "$(git status --porcelain vendor)" ]]; then
              echo 'vendor/ is out-of-date: run `dep ensure -vendor-only` and then check in the changes'
              echo 'If `dep ensure` results in no changes, make sure you are using the latest relase of dep'
              git status --porcelain vendor
              exit 1
            fi
      - run:
          name: vet
          command: |
            go tool vet cmds xcmds pkg
            go tool vet u-root.go
      - run:
          name: gofmt
          command: |
              test -z $(gofmt -s -l $(go list ./... | grep -v /vendor/))
      - run:
          name: ineffassign
          command: ineffassign .
  test:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Test all
          command: go test -a -ldflags '-s' ./pkg/... ./cmds/... ./xcmds/...
      - run:
          name: Test coverage
          command: go test -cover ./pkg/... ./cmds/... ./xcmds/...
  test-integration:
    docker:
      - image: uroottest/x86-integration:latest
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Test integration all
          command: go test -v -a -ldflags '-s' ./integration/...
  race:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 1
    steps:
      - checkout
      - run:
          name: Race detector
          command: go test -race ./pkg/... ./cmds/... ./xcmds/...
  bb_amd64:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Build u-root
          command: go build u-root.go
      - run:
          name: First bb build
          command: |
            ./u-root -build=bb
            mv /tmp/initramfs.linux_amd64.cpio /tmp/initramfs.linux_amd64.cpio.1
      - run:
          name: Second bb build
          command: ./u-root -build=bb
      - run:
          name: cmp bb test output (test reproducibility)
          command: cmp /tmp/initramfs.linux_amd64.cpio /tmp/initramfs.linux_amd64.cpio.1
      - run:
          name: Compress cpio
          command: lzma -9 /tmp/initramfs.linux_amd64.cpio
      - store_artifacts:
          path: /tmp/initramfs.linux_amd64.cpio.lzma
          destination: bb_initramfs.linux_amd64.cpio.lzma
      - store_artifacts:
          path: /tmp/initramfs.linux_amd64.cpio.1
          destination: bb_initramfs.linux_amd64.cpio.1
  bb_arm7:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
      - GOARCH: arm
      - GOARM: 7
    steps:
      - checkout
      - run:
          name: Build u-root
          environment:
            - GOARCH: amd64
          command: go build u-root.go
      - run:
          name: ARM7 test build
          command: ./u-root -build=bb
      - run:
          name: Compress cpio
          command: lzma -9 /tmp/initramfs.linux_arm.cpio
      - store_artifacts:
          path: /tmp/initramfs.linux_arm.cpio.lzma
          destination: bb_initramfs.linux_arm.cpio.lzma
  bb_arm64:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
      - GOARCH: arm64
    steps:
      - checkout
      - run:
          name: Build u-root
          environment:
            - GOARCH: amd64
          command: go build u-root.go
      - run:
          name: ARM64 test build
          command: ./u-root -build=bb
      - run:
          name: Compress cpio
          command: lzma -9 /tmp/initramfs.linux_arm64.cpio
      - store_artifacts:
          path: /tmp/initramfs.linux_arm64.cpio.lzma
          destination: bb_initramfs.linux_arm64.cpio.lzma
  bb_ppc64le:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
      - GOARCH: ppc64le
    steps:
      - checkout
      - run:
          name: Build u-root
          environment:
            - GOARCH: amd64
          command: go build u-root.go
      - run:
          name: ppc64le test build
          command: ./u-root -build=bb
      - run:
          name: Compress cpio
          command: lzma -9 /tmp/initramfs.linux_ppc64le.cpio
      - store_artifacts:
          path: /tmp/initramfs.linux_ppc64le.cpio.lzma
          destination: bb_initramfs.linux_ppc64le.cpio.lzma
  compile_cmds:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: build all tools
          command: |
            cd cmds
            go install -a ./...
            cd ../tools
            go install -a ./...
            cd ../xcmds
            go install -a ./...
  source_amd64:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Build u-root
          environment:
            - GOARCH: amd64
          command: go build u-root.go
      - run:
          name: Build ramfs
          command: ./u-root -build=source --tmpdir=/tmp/u-root
      - run:
          name: Compress cpio
          command: lzma -9 /tmp/initramfs.linux_amd64.cpio
      - store_artifacts:
          path: /tmp/initramfs.linux_amd64.cpio.lzma
          destination: source_initramfs.linux_amd64.cpio.lzma
  source_amd64_test_archive:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Install cpio
          command: sudo apt-get install cpio
      - run:
          name: Build u-root
          environment:
            - GOARCH: amd64
          command: go build u-root.go
      - run:
          name: Build ramfs
          command: ./u-root -build=source --tmpdir=/tmp/u-root
      - run:
          name: make test directory
          command: mkdir /tmp/u-root-test
      - run:
          name: extract archive
          command: cpio -i -d --no-absolute-filenames "go/*" < /tmp/initramfs.linux_amd64.cpio
          working_directory: /tmp/u-root-test
      - run:
          name: run go build
          command: GOPATH=$(pwd) GOROOT=$(pwd)/go ./go/bin/go build ./go/src/...
          working_directory: /tmp/u-root-test
  extra_files:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Install cpio
          command: sudo apt-get install cpio
      - run:
          name: Build u-root
          environment:
            - GOARCH: amd64
          command: go build u-root.go
      - run:
          name: Build ramfs
          command: ./u-root -build=bb --tmpdir=/tmp/u-root -files ///bin/bash
      - run:
          name: make test directory
          command: mkdir /tmp/u-root-test
      - run:
          name: extract archive
          command: cpio -i -d --no-absolute-filenames "bin/bash" < /tmp/initramfs.linux_amd64.cpio
          working_directory: /tmp/u-root-test
  extra_files_multiple_files:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Install cpio
          command: sudo apt-get install cpio
      - run:
          name: Build u-root
          environment:
            - GOARCH: amd64
          command: go build u-root.go
      - run:
          name: Create sample file
          command: mkdir sample && touch sample/file
      - run:
          name: Build ramfs
          command: ./u-root -build=bb --tmpdir=/tmp/u-root -files /bin/bash -files /bin/ls -files sample/file
      - run:
          name: make test directory
          command: mkdir /tmp/u-root-test
      - run:
          name: extract archive
          command: cpio -i -d --no-absolute-filenames "bin/bash bin/ls sample/file" < /tmp/initramfs.linux_amd64.cpio
          working_directory: /tmp/u-root-test
  extra_files_comma_syntax:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Install cpio
          command: sudo apt-get install cpio
      - run:
          name: Build u-root
          environment:
            - GOARCH: amd64
          command: go build u-root.go
      - run:
          name: Build ramfs
          command: ./u-root -build=bb --tmpdir=/tmp/u-root -files /bin/bash:bin/bush
      - run:
          name: make test directory
          command: mkdir /tmp/u-root-test
      - run:
          name: extract archive
          command: cpio -i -d --no-absolute-filenames "bin/bush" < /tmp/initramfs.linux_amd64.cpio
          working_directory: /tmp/u-root-test
  extra_files_multiple_files_mixed_syntax:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Install cpio
          command: sudo apt-get install cpio
      - run:
          name: Build u-root
          environment:
            - GOARCH: amd64
          command: go build u-root.go
      - run:
          name: Build ramfs
          command: ./u-root -build=bb --tmpdir=/tmp/u-root -files /bin/bash:bin/bush -files /bin/ls:ls
      - run:
          name: make test directory
          command: mkdir /tmp/u-root-test
      - run:
          name: extract archive
          command: cpio -i -d --no-absolute-filenames "bin/bush ls" < /tmp/initramfs.linux_amd64.cpio
          working_directory: /tmp/u-root-test
  extra_files_wrong_comma_syntax:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Install cpio
          command: sudo apt-get install cpio
      - run:
          name: Build u-root
          environment:
            - GOARCH: amd64
          command: go build u-root.go
      - run:
          name: Build ramfs
          command: if ./u-root -build=bb --tmpdir=/tmp/u-root -files /bin/bash:/bin/bash; then exit 1; else exit 0; fi
  check_licenses:
    docker:
      - image: circleci/golang:1.11
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Check licenses
          command: go run scripts/checklicenses/checklicenses.go
