version: 2

templates:
  golang-template:
    &golang-template
    docker:
      - image: uroottest/test-image-amd64:v5.1.0
    working_directory: /home/circleci/go/src/github.com/u-root/u-root
    environment:
      - UROOT_SOURCE: /home/circleci/go/src/github.com/u-root/u-root
      - CGO_ENABLED: 0
      # x7 all timeouts for QEMU VM tests since they run without KVM.
      - UROOT_QEMU_TIMEOUT_X: 7

  integration-template:
    &integration-template
    working_directory: /home/circleci/go/src/github.com/u-root/u-root
    environment:
      - UROOT_SOURCE: /home/circleci/go/src/github.com/u-root/u-root
      - CGO_ENABLED: 0
      # x7 all timeouts for QEMU VM tests since they run without KVM.
      - UROOT_QEMU_TIMEOUT_X: 7
    steps:
      - checkout
      - run:
          name: Test integration
          command: UROOT_SOURCE=/home/circleci/go/src/github.com/u-root/u-root
            UROOT_QEMU_COVERPROFILE=coverage.txt go test -a -v -timeout=15m
            -ldflags='-s' -failfast ./integration/...
          no_output_timeout: 15m
      - run:
          name: Upload integration coverage
          command: bash <(curl -s https://codecov.io/bash)

  beefy-template:
    &beefy-template
    <<: *golang-template
    resource_class: large

workflows:
  version: 2
  build_and_test:
    jobs:
      - test
      - race
      - test-integration-amd64
      - test-integration-arm
      - test-integration-arm64

jobs:
  test:
    <<: *beefy-template
    environment:
      - GOMAXPROCS: 1
    steps:
      - checkout
      - run:
          name: Test Packages
          command: UROOT_SOURCE=/home/circleci/go/src/github.com/u-root/u-root go test -v -a
            -timeout=20m -ldflags='-s' -failfast -coverprofile=coverage_pkg.txt
            -covermode=atomic -coverpkg=./pkg/... ./pkg/...
          no_output_timeout: 15m

      - run:
          name: Test coverage
          command: UROOT_SOURCE=/home/circleci/go/src/github.com/u-root/u-root
            UROOT_QEMU_COVERPROFILE=vmcoverage.txt go test -timeout=20m
            -failfast -coverprofile=coverage.txt -covermode=atomic -cover
            ./cmds/... ./pkg/...

      - run:
          name: Upload coverage
          command: bash <(curl -s https://codecov.io/bash)

  race:
    <<: *beefy-template
    environment:
      - CGO_ENABLED: 1
      - GOMAXPROCS: 1
    steps:
      - checkout
      - run:
          name: Race detector
          command: UROOT_SOURCE=/home/circleci/go/src/github.com/u-root/u-root go test -race
            -timeout=15m -failfast ./cmds/... ./pkg/...

  compile_cmds:
    <<: *golang-template
    steps:
      - checkout
      - run:
          name: build all tools
          command: |
            cd cmds
            go install -a ./...
            cd ../tools
            go install -a ./...

  test-integration-amd64:
    <<: *integration-template
    docker:
      - image: uroottest/test-image-amd64:v5.1.0
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large

  test-integration-arm:
    <<: *integration-template
    docker:
      - image: uroottest/test-image-arm:v5.1.0

  # This arch needs a different working dir, so don't use integration-template
  test-integration-arm64:
    docker:
      - image: uroottest/test-image-arm64:v5.1.0
    working_directory: /home/circleci/go/src/github.com/u-root/u-root
    environment:
      - UROOT_SOURCE: /home/circleci/go/src/github.com/u-root/u-root
      - CGO_ENABLED: 0
      # x7 all timeouts for QEMU VM tests since they run without KVM.
      - UROOT_QEMU_TIMEOUT_X: 7
    steps:
      - checkout
      - run:
          name: Test integration
          command: UROOT_SOURCE=/home/circleci/go/src/github.com/u-root/u-root
            UROOT_QEMU_COVERPROFILE=coverage.txt go test -a -v -timeout=15m
            -ldflags='-s' -failfast ./integration/...
          no_output_timeout: 15m
      - run:
          name: Upload integration coverage
          command: bash <(curl -s https://codecov.io/bash)
