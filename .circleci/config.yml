version: 2
workflows:
  version: 2
  build_and_test:
    jobs:
      - clean-code
      - test:
          requires:
            - clean-code
      - test-integration-amd64:
          requires:
            - clean-code
      - test-integration-arm:
          requires:
            - clean-code
      - race:
          requires:
            - clean-code
      - compile_cmds:
          requires:
            - clean-code
      - check_licenses:
          requires:
            - clean-code
jobs:
  clean-code:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
      - GO111MODULE: 'on'
    steps:
      - checkout
      - run:
          name: Install tools
          command: |
            go install golang.org/x/lint/golint
            go install github.com/alecthomas/gometalinter
            go install github.com/gordonklaus/ineffassign
      - run:
          name: vet
          command: |
            go vet github.com/u-root/u-root/...
      - run:
          name: gofmt
          command: |
              test -z "$(gofmt -s -l $(go list ./... | grep -v /vendor/))"
      - run:
          name: gometalinter
          command: |
              gometalinter --vendor ./... --disable-all --enable=golint \
                --skip=pkg/uroot/test \
                --skip=cmds/elvish \
                --exclude="exported (function|type|const|method|var) (\w|_|\.)+ should have comment" \
                --exclude="don't use underscores" \
                --exclude="don't use ALL_CAPS" \
                --exclude="comment on exported (function|type|const|method|var) (\w|_|\.)+ should be of the form" \
                --exclude="package comment should be of the form" \
                --exclude="(function|type|const|method|var|type field|struct field) (\w|_|\.)+ should be (\w|_|\.)+" \
                --exclude="stutter" \
                --exclude="which can be annoying to use"
      - run:
          name: ineffassign
          command: ineffassign .
  test:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
      - GO111MODULE: 'on'
    steps:
      - checkout
      - run:
          name: Test all
          command: go test -a -ldflags '-s' ./...
      - run:
          name: Test coverage
          command: go test -cover `go list ./... | grep github.com/u-root/u-root/`
  test-integration-amd64:
    docker:
      - image: uroottest/test-image-amd64:v3.2.3
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
      - GO111MODULE: 'on'
    steps:
      - checkout
      - run:
          name: Test integration amd64
          command: go test -v -a -ldflags '-s' ./integration/...
      - store_artifacts:
          path: integration/serial
  test-integration-arm:
    docker:
      - image: uroottest/test-image-arm:v3.0.0
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
      - GO111MODULE: 'on'
    steps:
      - checkout
      - run:
          name: Test integration arm
          command: go test -v -a -ldflags '-s' ./integration/...
      - store_artifacts:
          path: integration/serial
  race:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 1
      - GO111MODULE: 'on'
    steps:
      - checkout
      - run:
          name: Race detector
          command: go test -race `go list ./... | grep github.com/u-root/u-root/`
  compile_cmds:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
      - GO111MODULE: 'on'
    steps:
      - checkout
      - run:
          name: build all tools
          command: |
            cd cmds
            go install -a ./...
            cd ../tools
            go install -a ./...
            cd ../xcmds
            go install -a ./...
  check_licenses:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
      - GO111MODULE: 'on'
    steps:
      - checkout
      - run:
          name: Check licenses
          command: go run scripts/checklicenses/checklicenses.go
  check_symlinks:
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/github.com/u-root/u-root
    environment:
      - CGO_ENABLED: 0
      - GO111MODULE: 'on'
    steps:
      - checkout
      - run:
          name: Symbol tests to ensure we do not break symlink handling
          command: mkdir /tmp/usr && ln -s /tmp/usr/x /tmp/usr/y && go run u-root.go -build=bb -files /tmp/usr minimal
