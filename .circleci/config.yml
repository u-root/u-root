version: 2

templates:
  golang-template:
    &golang-template
    docker:
      - image: uroottest/test-image-amd64:v5.2.0
    working_directory: /home/circleci/go/src/github.com/u-root/u-root
    environment:
      - UROOT_SOURCE: /home/circleci/go/src/github.com/u-root/u-root
      - CGO_ENABLED: 0
      # x7 all timeouts for QEMU VM tests since they run without KVM.
      - UROOT_QEMU_TIMEOUT_X: 7

  integration-template:
    &integration-template
    working_directory: /home/circleci/go/src/github.com/u-root/u-root
    environment:
      - UROOT_SOURCE: /home/circleci/go/src/github.com/u-root/u-root
      - CGO_ENABLED: 0
      # x7 all timeouts for QEMU VM tests since they run without KVM.
      - UROOT_QEMU_TIMEOUT_X: 7
    steps:
      - checkout
      - run:
          name: Test integration
          command: UROOT_QEMU_COVERPROFILE=coverage.txt go test -a -v
            -timeout=20m -p=1 -ldflags='-s' -failfast ./integration/...
          no_output_timeout: 15m
      - run:
          name: Upload integration coverage
          command: bash <(curl -s https://codecov.io/bash)

  beefy-template:
    &beefy-template
    <<: *golang-template
    resource_class: large

workflows:
  version: 2
  build_and_test:
    jobs:
      - test-pkgs
      - test-cmds
      - test-build
      - test-tinygo
      - test-build-tamago-riscv64
      - test-build-tamago-arm
      - test-integration-amd64
      - test-integration-arm
      - test-integration-arm64
      - race
      - compile_cmds
      - check_templates
      - check_licenses

jobs:
  test-pkgs:
    <<: *beefy-template
    steps:
      - checkout
      - run:
          name: Test packages
          command: UROOT_QEMU_COVERPROFILE=vmcoverage.txt go test -v -a -p=1
            -timeout=20m -ldflags='-s' -failfast -coverprofile=coverage_pkg.txt
            -covermode=atomic -coverpkg=./pkg/... ./pkg/...
          no_output_timeout: 15m

      - run:
          name: Upload coverage
          command: bash <(curl -s https://codecov.io/bash)

  test-cmds:
    <<: *beefy-template
    steps:
      - checkout
      - run:
          name: Test commands
          command: UROOT_QEMU_COVERPROFILE=vmcoverage.txt go test -v -p=1
            -timeout=20m -failfast -coverprofile=coverage.txt -covermode=atomic
            -cover ./cmds/...

      - run:
          name: Upload coverage
          command: bash <(curl -s https://codecov.io/bash)

  test-build:
    <<: *beefy-template
    steps:
      - checkout
      - run:
          name: Test u-root build
          command: go test -a -timeout=15m .
          no_output_timeout: 15m

  test-tinygo:
    <<: *beefy-template
    steps:
      - checkout
      - run:
          name: tinygo build and test commands
          command: echo sooner but not yet docker run --rm -v ~/go:/home/tinygo/go  tinygo/tinygo:0.26.0 bash -c 'cd  go/src/github.com/u-root/u-root/cmds/core/cmp && tinygo test .'
          no_output_timeout: 15m

  test-build-tamago-arm:
    docker:
      - image: uroottest/test-image-tamago:v4.4.0
    working_directory: /home/circleci/go/src/github.com/u-root/u-root
    environment:
      - UROOT_SOURCE: /home/circleci/go/src/github.com/u-root/u-root
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Test u-root tamago build
          command: GOOS=tamago GOARCH=arm GOARM=7 go build ./pkg/dt/...
      - run:
          name: build armory-boot elf target
          command: |
            cd /home/circleci
            git clone https://github.com/usbarmory/armory-boot.git
            cd armory-boot
            go version
            BOOT=eMMC make elf

  test-build-tamago-riscv64:
    docker:
      - image: uroottest/test-image-tamago:v4.4.0
    working_directory: /home/circleci/go/src/github.com/u-root/u-root
    environment:
      - UROOT_SOURCE: /home/circleci/go/src/github.com/u-root/u-root
      - CGO_ENABLED: 0
    steps:
      - checkout
      - run:
          name: Test u-root tamago build
          command: GOOS=tamago GOARCH=riscv64 go build ./pkg/dt/...

  race:
    <<: *beefy-template
    environment:
      - UROOT_SOURCE: /home/circleci/go/src/github.com/u-root/u-root
      - CGO_ENABLED: 1
    steps:
      - checkout
      - run:
          name: Race detector
          command: go test -race -timeout=15m -p=1 -failfast ./cmds/... ./pkg/...

  compile_cmds:
    <<: *golang-template
    steps:
      - checkout
      - run:
          name: build all tools
          command: |
            cd cmds
            go install -a ./...
            cd ../tools
            go install -a ./...

  check_licenses:
    <<: *golang-template
    steps:
      - checkout
      - run:
          name: Check licenses
          command: go run tools/checklicenses/checklicenses.go -c
            tools/checklicenses/config.json

  check_templates:
    <<: *golang-template
    steps:
      - checkout
      - run:
          name: Ensure that every template builds for a variety of options.
          command: |
            go build .
            goruncmd="./u-root -stats-output-path=/tmp/stats.json"
            $goruncmd minimal
            $goruncmd core
            $goruncmd coreboot-app
            $goruncmd all
            $goruncmd world
            # Fails because of dups. Is this supposed to work?
            #$goruncmd all core
            #$goruncmd all core
            GOOS=plan9 $goruncmd -defaultsh=/bbin/rush plan9
            cat /tmp/stats.json
      - store_artifacts:
          name: Store build stats
          path: /tmp/stats.json
          destination: stats.json

  test-integration-amd64:
    <<: *integration-template
    docker:
      - image: uroottest/test-image-amd64:v5.2.0
    resource_class: large

  test-integration-arm:
    <<: *integration-template
    docker:
      - image: uroottest/test-image-arm:v5.1.0

  test-integration-arm64:
    <<: *integration-template
    docker:
      - image: uroottest/test-image-arm64:v5.2.0
    resource_class: large
